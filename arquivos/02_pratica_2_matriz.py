# -*- coding: utf-8 -*-
"""02_Pratica_2_Matriz

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b6D4cWQDAkI2BExK4DIvnZWutgQ7Is7W

# Criação de matrizes utilizando listas aninhadas
"""

# Criando uma matriz 2x3
matriz = [[1, 2, 3],
          [4, 5, 6]]

print(matriz)

# Criando uma matriz 3x3
matriz = [[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]

print(matriz)

"""# Acesso a elementos de uma matriz

"""

# Acessando um elemento específico da matriz
matriz = [[1, 2, 3], [4, 5, 6]]
print(matriz[1][2])  # Acessando o elemento na segunda linha e terceira coluna (índice 1,2)

# Acessando um elemento específico da matriz
matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("Elemento na linha 2, coluna 3:", matriz[1][2])

"""# Operações básicas com matrizes (adição, subtração, multiplicação)"""

# Duas matrizes para somar
A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]

soma = []

for i in range(len(A)):
    linha_soma = []
    for j in range(len(A[0])):
        elemento_soma = A[i][j] - B[i][j]
        linha_soma.append(elemento_soma)
    soma.append(linha_soma)

print('Matriz A    -> ',A)
print('Matriz B    -> ',B)
print('Matriz Soma -> ',soma)

A = [[1, 2],[3, 4]]
B = [[5, 6],[7, 8]]

# Adição de matrizes
soma = [[A[i][j] - B[i][j] for j in range(len(A[0]))] for i in range(len(A))]

print('Matriz A    -> ',A)
print('Matriz B    -> ',B)
print('Matriz Soma -> ',soma)

# Definindo duas matrizes
matriz1 = [[1, 2],
           [3, 4]]
matriz2 = [[5, 6],
           [7, 8]]

# Adição de matrizes
soma = [[matriz1[i][j] + matriz2[i][j] for j in range(len(matriz1[0]))] for i in range(len(matriz1))]
print(soma)

# Subtração de matrizes
subtracao = [[matriz1[i][j] - matriz2[i][j] for j in range(len(matriz1[0]))] for i in range(len(matriz1))]
print(subtracao)

# Multiplicação de matrizes
multiplicacao = [[sum(matriz1[i][k] * matriz2[k][j] for k in range(len(matriz2))) for j in range(len(matriz2[0]))] for i in range(len(matriz1))]
print(multiplicacao)

"""# Iteração sobre elementos de uma matriz"""

matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(matriz)
# Iterando sobre os elementos da matriz e imprimindo-os
for linha in matriz:
    for elemento in linha:
        print(elemento, end=' ')
    print()  # Imprime uma nova linha após cada linha da matriz

"""# Indexação e fatiamento de matrizes"""

matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Indexação para acessar um elemento específico
elemento = matriz[1][2]  # Acessando o elemento na segunda linha e terceira coluna
print("Elemento na posição (1, 2):", elemento)

matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Fatiamento para acessar uma parte específica da matriz
submatriz = matriz[0:2][0:2]  # Fatiando para obter as duas primeiras linhas e colunas
print("Submatriz:")
for linha in submatriz:
    print(linha)

matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Acesso a uma submatriz
submatriz = [linha[1:] for linha in matriz]

print(matriz)
print(submatriz)

"""# Operações de linha e coluna (adição, remoção, alteração)"""

matriz = [[1, 2, 3], [4, 5, 6]]

print(matriz)

# Adição de uma nova linha
nova_linha = [7, 8, 9]
matriz.append(nova_linha)

print(matriz)

matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(matriz)

# Remoção de uma linha
del matriz[1]
print(matriz)

matriz = [[1, 2, 3], [4, 5, 6]]

# Alteração de um elemento
matriz[0][0] = 10
print(matriz)

"""# Transposição de matrizes

"""

# Transpondo uma matriz
transposta = [[matriz[j][i] for j in range(len(matriz))] for i in range(len(matriz[0]))]
print(transposta)

"""# Aplicações práticas de matrizes em problemas do mundo real

## Análise de Dados Financeiros
"""

# Exemplo de matriz representando os retornos diários de diferentes ativos financeiros

dados_financeiros = [
    [0.02, -0.01, 0.03, -0.02],   # Retornos do Ativo A
    [0.01, 0.03, -0.02, 0.04],    # Retornos do Ativo B
    [-0.01, 0.02, 0.01, -0.03]    # Retornos do Ativo C
]

# Calcular a média de retorno de cada ativo
medias_retorno = [sum(coluna) / len(coluna) for coluna in zip(*dados_financeiros)]
print("Médias de retorno de cada ativo:", medias_retorno)

# Calcular a correlação entre diferentes ativos
correlacoes = [[sum(a * b for a, b in zip(coluna1, coluna2)) / (len(coluna1) - 1)
                for coluna2 in dados_financeiros] for coluna1 in dados_financeiros]
print("Matriz de correlação entre ativos:")
for linha in correlacoes:
    print(linha)

"""## Sistema de transporte público"""

# Exemplo de matriz de adjacência representando as conexões entre estações em um sistema de transporte público
sistema_transporte = [
    [0, 1, 0, 1],  # Conexões da Estação 1
    [1, 0, 1, 0],  # Conexões da Estação 2
    [0, 1, 0, 1],  # Conexões da Estação 3
    [1, 0, 1, 0]   # Conexões da Estação 4
]

# Verificar se há uma conexão direta entre duas estações
estacao_origem = 1
estacao_destino = 3
if sistema_transporte[estacao_origem - 1][estacao_destino - 1] == 1:
    print(f"Existe uma conexão direta entre as estações {estacao_origem} e {estacao_destino}.")
else:
    print(f"Não existe uma conexão direta entre as estações {estacao_origem} e {estacao_destino}.")

"""## Grade de horário"""

# Exemplo de matriz representando a disponibilidade de salas em uma grade de horários
grade_horarios = [
    ['Sala 101', 'Sala 102', 'Sala 103'],  # Segunda-feira
    ['Sala 102', 'Sala 103', 'Sala 101'],  # Terça-feira
    ['Sala 103', 'Sala 101', 'Sala 102'],  # Quarta-feira
    ['Sala 101', 'Sala 102', 'Sala 103'],  # Quinta-feira
    ['Sala 102', 'Sala 103', 'Sala 101']   # Sexta-feira
]

# Verificar a disponibilidade de uma sala em um determinado dia e horário
dia_semana = 3  # Quarta-feira
horario = 2     # Segundo horário
sala_desejada = 'Sala 101'
if sala_desejada in grade_horarios[dia_semana - 1][horario - 1]:
    print(f"A sala {sala_desejada} está disponível na {dia_semana}ª-feira, {horario}º horário.")
else:
    print(f"A sala {sala_desejada} não está disponível na {dia_semana}ª-feira, {horario}º horário.")

"""## Controle de estoque"""

# Exemplo de matriz representando o estoque de diferentes produtos em diferentes dias da semana
estoque = [
    [100, 120, 130, 110, 90],  # Estoque do Produto A ao longo da semana
    [80, 90, 100, 95, 85],      # Estoque do Produto B ao longo da semana
    [150, 160, 140, 155, 165]   # Estoque do Produto C ao longo da semana
]

# Calcular a média de estoque de cada produto ao longo da semana
medias_estoque = [sum(dados_dia) / len(dados_dia) for dados_dia in zip(*estoque)]
print("Médias de estoque de cada produto ao longo da semana:", medias_estoque)

# Atualizar o estoque de um produto com base em uma entrega recebida
produto_atualizar = 2
entrega_recebida = [10, 15, 20, 25, 30]
estoque[produto_atualizar - 1] = [estoque[produto_atualizar - 1][i] + entrega_recebida[i]
                                  for i in range(len(estoque[produto_atualizar - 1]))]
print("Estoque atualizado do Produto B após a entrega:", estoque[produto_atualizar - 1])

"""##"""